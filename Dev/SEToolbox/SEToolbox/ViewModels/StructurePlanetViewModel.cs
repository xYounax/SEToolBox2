namespace SEToolbox.ViewModels
{
    using System.ComponentModel;
    using System.Diagnostics.Contracts;
    using System.Globalization;
    using System.Windows;
    using System.Windows.Input;
    using SEToolbox.Interfaces;
    using SEToolbox.Models;
    using SEToolbox.Services;
    using SEToolbox.Views;

    public class StructurePlanetViewModel : StructureBaseViewModel<StructurePlanetModel>
    {
        private readonly IDialogService _dialogService;

        #region ctor

        public StructurePlanetViewModel(BaseViewModel parentViewModel, StructurePlanetModel dataModel)
           : this(parentViewModel, dataModel, ServiceLocator.Resolve<IDialogService>())
        {
        }

        public StructurePlanetViewModel(BaseViewModel parentViewModel, StructurePlanetModel dataModel, IDialogService dialogService)
            : base(parentViewModel, dataModel)
        {
            Contract.Requires(dialogService != null);

            _dialogService = dialogService;

            DataModel.PropertyChanged += delegate (object sender, PropertyChangedEventArgs e)
            {
                // Will bubble property change events from the Model to the ViewModel.
                OnPropertyChanged(e.PropertyName);
            };
        }

        #endregion

        #region command properties

        public ICommand CopyDetailCommand => new DelegateCommand(CopyDetailExecuted, CopyDetailCanExecute);

        public ICommand RegenerateCommand => new DelegateCommand(RegenerateExecuted, RegenerateCanExecute);

        public ICommand CopyCenterGpsCommand => new DelegateCommand(CopyCenterGpsExecuted, CopyCenterGpsCanExecute);

        #endregion

        #region Properties

        protected new StructurePlanetModel DataModel
        {
            get { return base.DataModel as StructurePlanetModel; }
        }

        public string Name
        {
            get { return DataModel.Name; }
            set { DataModel.Name = value; }
        }

        public BindableVector3DModel Center
        {
            get { return new BindableVector3DModel(DataModel.Center); }
            set { DataModel.Center = value.ToVector3(); }
        }

        public float Radius
        {
            get { return DataModel.Radius; }
            set { DataModel.Radius = value; }
        }

        public bool HasAtmosphere
        {
            get { return DataModel.HasAtmosphere; }
            set { DataModel.HasAtmosphere = value; }
        }

        public float AtmosphereRadius
        {
            get { return DataModel.AtmosphereRadius; }
            set { DataModel.AtmosphereRadius = value; }
        }

        public float MinimumSurfaceRadius
        {
            get { return DataModel.MinimumSurfaceRadius; }
            set { DataModel.MinimumSurfaceRadius = value; }
        }

        public float MaximumHillRadius
        {
            get { return DataModel.MaximumHillRadius; }
            set { DataModel.MaximumHillRadius = value; }
        }

        public float GravityFalloff
        {
            get { return DataModel.GravityFalloff; }
            set { DataModel.GravityFalloff = value; }
        }

        public float SurfaceGravity
        {
            get { return DataModel.SurfaceGravity; }
            set { DataModel.SurfaceGravity = value; }
        }

        public bool SpawnsFlora
        {
            get { return DataModel.SpawnsFlora; }
            set { DataModel.SpawnsFlora = value; }
        }

        public bool ShowGPS
        {
            get { return DataModel.ShowGPS; }
            set
            {
                DataModel.ShowGPS = value;
                MainViewModel.IsModified = true;
            }
        }

        public string PlanetGenerator
        {
            get { return DataModel.PlanetGenerator; }
            set { DataModel.PlanetGenerator = value; }
        }

        #endregion

        #region methods

        public bool CopyDetailCanExecute()
        {
            return true;
        }

        public void CopyDetailExecuted()
        {
            var detail = string.Format(Properties.Resources.CtlPlanetDetail,
                Name,
                Center.X, Center.Y, Center.Z,
                PlayerDistance,
                PositionAndOrientation.Value.Position.X, PositionAndOrientation.Value.Position.Y, PositionAndOrientation.Value.Position.Z,
                Radius,
                HasAtmosphere,
                AtmosphereRadius,
                MinimumSurfaceRadius,
                MaximumHillRadius,
                GravityFalloff,
                SurfaceGravity,
                SpawnsFlora,
                ShowGPS,
                PlanetGenerator);

            try
            {
                Clipboard.Clear();
                Clipboard.SetText(detail);
            }
            catch
            {
                // Ignore exception which may be generated by a Remote desktop session where Clipboard access has not been granted.
            }
        }


        public bool RegenerateCanExecute()
        {
            return true;
        }

        public void RegenerateExecuted()
        {
            var model = new RegeneratePlanetModel();
            var loadVm = new RegeneratePlanetViewModel(this, model);
            model.Load(DataModel.Seed, DataModel.Radius);
            var result = _dialogService.ShowDialog<WindowRegeneratePlanet>(this, loadVm);
            if (result == true)
            {
                DataModel.RegeneratePlanet(model.Seed, (float)model.Diameter / 2f);
                MainViewModel.IsModified = true;
            }
        }

        public bool CopyCenterGpsCanExecute()
        {
            return !IsBusy;
        }

        public void CopyCenterGpsExecuted()
        {
            var text = string.Format(CultureInfo.InvariantCulture, "GPS:{0}:{1:0.00}:{2:0.00}:{3:0.00}:",  DataModel.DisplayName.Replace(":", "_").Replace("&", "_"), DataModel.Center.X, DataModel.Center.Y, DataModel.Center.Z);
            try
            {
                Clipboard.Clear();
                Clipboard.SetText(text);
            }
            catch
            {
                // Ignore exception which may be generated by a Remote desktop session where Clipboard access has not been granted.
            }
        }


        #endregion
    }
}
